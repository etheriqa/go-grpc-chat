// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	None
	RequestAuthorize
	ResponseAuthorize
	RequestConnect
	CommandSay
	Event
	EventNone
	EventJoin
	EventLeave
	EventLog
*/
package chat

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type None struct {
}

func (m *None) Reset()         { *m = None{} }
func (m *None) String() string { return proto.CompactTextString(m) }
func (*None) ProtoMessage()    {}

type RequestAuthorize struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RequestAuthorize) Reset()         { *m = RequestAuthorize{} }
func (m *RequestAuthorize) String() string { return proto.CompactTextString(m) }
func (*RequestAuthorize) ProtoMessage()    {}

type ResponseAuthorize struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,proto3" json:"session_id,omitempty"`
}

func (m *ResponseAuthorize) Reset()         { *m = ResponseAuthorize{} }
func (m *ResponseAuthorize) String() string { return proto.CompactTextString(m) }
func (*ResponseAuthorize) ProtoMessage()    {}

type RequestConnect struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,proto3" json:"session_id,omitempty"`
}

func (m *RequestConnect) Reset()         { *m = RequestConnect{} }
func (m *RequestConnect) String() string { return proto.CompactTextString(m) }
func (*RequestConnect) ProtoMessage()    {}

type CommandSay struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,proto3" json:"session_id,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *CommandSay) Reset()         { *m = CommandSay{} }
func (m *CommandSay) String() string { return proto.CompactTextString(m) }
func (*CommandSay) ProtoMessage()    {}

type Event struct {
	None  *EventNone  `protobuf:"bytes,1,opt,name=none" json:"none,omitempty"`
	Join  *EventJoin  `protobuf:"bytes,2,opt,name=join" json:"join,omitempty"`
	Leave *EventLeave `protobuf:"bytes,3,opt,name=leave" json:"leave,omitempty"`
	Log   *EventLog   `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}

func (m *Event) GetNone() *EventNone {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Event) GetJoin() *EventJoin {
	if m != nil {
		return m.Join
	}
	return nil
}

func (m *Event) GetLeave() *EventLeave {
	if m != nil {
		return m.Leave
	}
	return nil
}

func (m *Event) GetLog() *EventLog {
	if m != nil {
		return m.Log
	}
	return nil
}

type EventNone struct {
}

func (m *EventNone) Reset()         { *m = EventNone{} }
func (m *EventNone) String() string { return proto.CompactTextString(m) }
func (*EventNone) ProtoMessage()    {}

type EventJoin struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EventJoin) Reset()         { *m = EventJoin{} }
func (m *EventJoin) String() string { return proto.CompactTextString(m) }
func (*EventJoin) ProtoMessage()    {}

type EventLeave struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EventLeave) Reset()         { *m = EventLeave{} }
func (m *EventLeave) String() string { return proto.CompactTextString(m) }
func (*EventLeave) ProtoMessage()    {}

type EventLog struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *EventLog) Reset()         { *m = EventLog{} }
func (m *EventLog) String() string { return proto.CompactTextString(m) }
func (*EventLog) ProtoMessage()    {}

func init() {
}

// Client API for Chat service

type ChatClient interface {
	Authorize(ctx context.Context, in *RequestAuthorize, opts ...grpc.CallOption) (*ResponseAuthorize, error)
	Connect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (Chat_ConnectClient, error)
	Say(ctx context.Context, in *CommandSay, opts ...grpc.CallOption) (*None, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Authorize(ctx context.Context, in *RequestAuthorize, opts ...grpc.CallOption) (*ResponseAuthorize, error) {
	out := new(ResponseAuthorize)
	err := grpc.Invoke(ctx, "/.Chat/Authorize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Connect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (Chat_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/.Chat/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ConnectClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type chatConnectClient struct {
	grpc.ClientStream
}

func (x *chatConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Say(ctx context.Context, in *CommandSay, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := grpc.Invoke(ctx, "/.Chat/Say", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	Authorize(context.Context, *RequestAuthorize) (*ResponseAuthorize, error)
	Connect(*RequestConnect, Chat_ConnectServer) error
	Say(context.Context, *CommandSay) (*None, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Authorize_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RequestAuthorize)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChatServer).Authorize(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Chat_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestConnect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Connect(m, &chatConnectServer{stream})
}

type Chat_ConnectServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type chatConnectServer struct {
	grpc.ServerStream
}

func (x *chatConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_Say_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommandSay)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChatServer).Say(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Chat_Authorize_Handler,
		},
		{
			MethodName: "Say",
			Handler:    _Chat_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Chat_Connect_Handler,
			ServerStreams: true,
		},
	},
}
